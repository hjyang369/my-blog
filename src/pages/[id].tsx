import Head from "next/head";
import style from "../styles/main.module.css";
import Item from "../components/common/Item/Item";
import { useEffect, useState } from "react";
import Nav from "../components/Nav/Nav";
import React from "react";
import { PostDataType } from "../types/post";
import { idState } from "../store/savePostStore";
import { useRecoilState, useRecoilValue } from "recoil";
import { getReady } from "../modules/function";
import { userState } from "../store/userStore";
import { getFirstPage, getNextPage } from "./api/post"; // FIREBASE
import { useQuery } from "@tanstack/react-query";

export default function Main() {
  const [itemListData, setItemListData] = useState<PostDataType[]>([]);
  const [page, setPage] = useState(0);
  const [key, setKey] = useState(null);
  const [isLastItem, setIsLastItem] = useState(false);
  const [loading, setLoading] = useState(false);
  const idList = useRecoilState(idState);
  const user = useRecoilValue(userState); // 새로고침하더라고 지속적으로 user 정보가 저장되어있어야함

  //         const UpdateData = newData.map((item) => {
  //           const isScraped = idList[0].includes(item?.id);
  //           return { ...item, like: isScraped };
  //         });
  //         return UpdateData;
  //         setItemListData((prevData) => [...prevData, ...UpdateData]);
  //         data.data.isLast === true && setIsLastItem(true);

  const getPostList = async () => {
    try {
      setLoading(true);
      const result = await getFirstPage();
      const { firstData, lastVisible } = result;
      if (firstData) {
        setItemListData(firstData);
        // 커서로 사용할 마지막 문서 스냅샷 저장
        setKey(lastVisible);
      }
    } catch (err) {
      console.log(err);
    }
    setLoading(false);
  };

  useEffect(() => {
    getPostList();
  }, []);

  const getMorePostList = async (loadCount) => {
    try {
      const result = await getNextPage(loadCount);
      const { nextData, lastVisible } = result;

      if (nextData?.length === 0) {
        setIsLastItem(true);
      } else {
        const updateItemListData = (prevData) => {
          return [...prevData, ...nextData];
        };
        setItemListData(updateItemListData);
        setKey(lastVisible);
      }
    } catch (err) {
      console.log(err);
    }
  };

  useEffect(() => {
    if (key) {
      !isLastItem && getMorePostList(key);
    }
  }, [page]);

  // const { data, isLoading, isError, isFetching } = useQuery({
  //   queryKey: [
  //     "posts",
  //     page,
  //     startDate,
  //     lastDate,
  //     tagTitle,
  //     contentTitle,
  //     currentSort,
  //   ],
  //   queryFn: () => getPostListFirebase(),
  //   staleTime: 6000,
  //   gcTime: 30000,
  // });
  // if (isLoading) return <div>Loading...</div>;
  // if (isError) return <div>Error fetching data</div>;

  return (
    <>
      <Head>
        <title>my blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={style.main}>
        {/* TODO user 생기면 user name 으로 로고 변경 */}
        <Nav />

        {!loading && itemListData.length === 0 ? (
          <div className="my-60 flex flex-col items-center gap-4 text-gray300">
            <div className="text-3xl">검색된 데이터가 없습니다.</div>
            <div className="text-3xl">다시 검색해주세요.</div>
          </div>
        ) : (
          <div style={{ display: "flex", flexDirection: "column", gap: 10 }}>
            {itemListData.map((item, idx) => {
              return (
                <Item
                  key={item.post_id}
                  onFetchMore={() => setPage((prev) => prev + 1)}
                  isLastItem={itemListData.length - 1 === idx}
                  // moveToUserMain={() => moveToPage(`/${"username"}`)}
                  moveToUserMain={getReady}
                  item={item}
                />
              );
            })}
          </div>
        )}

        {/* {!isLastItem && loadingMore && <div>loading</div>} */}
      </div>
    </>
  );
}
