import Head from "next/head";
import style from "../styles/main.module.css";
import Item from "../components/common/Item/Item";
import { useEffect, useState } from "react";
import Nav from "../components/Nav/Nav";
import React from "react";
import { PostDataType } from "../types/post";
import { idState } from "../store/savePostStore";
import { useRecoilState, useRecoilValue } from "recoil";
import Filter from "../components/Filter";
import { mainFilterTitleState, mainSortState } from "../store/mainFilterStore";
import { getReady } from "../modules/function";
import { userState } from "../store/userStore";
import {
  dateFilterPost,
  loadPostList,
  hashTagFilterPost,
  titleFilterPost,
} from "./api/post"; // FIREBASE
import { useQuery } from "@tanstack/react-query";

export default function Main() {
  const [itemListData, setItemListData] = useState<PostDataType[]>([]);
  const [posts, setPosts] = useState<PostDataType[]>([]);
  const [page, setPage] = useState(10);
  const [loading, setLoading] = useState(false);
  const [filterTitle, setFilterTitle] = useRecoilState(mainFilterTitleState);
  const { dateTitle, tagTitle, contentTitle } = filterTitle;
  const { startDate, lastDate } = dateTitle;
  const [currentSort, setCurrentSort] = useRecoilState(mainSortState);
  const idList = useRecoilState(idState);
  const user = useRecoilValue(userState); // 새로고침하더라고 지속적으로 user 정보가 저장되어있어야함

  const changeSort = (value: string) => {
    setItemListData([]);
    setCurrentSort(value);
  };

  //         const UpdateData = newData.map((item) => {
  //           const isScraped = idList[0].includes(item?.id);
  //           return { ...item, like: isScraped };
  //         });
  //         return UpdateData;
  //         setItemListData((prevData) => [...prevData, ...UpdateData]);
  //         data.data.isLast === true && setIsLastItem(true);

  const getPostList = async () => {
    try {
      setLoading(true);
      const data = await loadPostList();
      setItemListData(data);
    } catch (err) {
      console.log(err);
    }
    setLoading(false);
  };

  useEffect(() => {
    getPostList();
  }, []);

  useEffect(() => {
    setPosts(itemListData.slice(0, page));
  }, [itemListData, page]);

  // const { data, isLoading, isError, isFetching } = useQuery({
  //   queryKey: [
  //     "posts",
  //     page,
  //     startDate,
  //     lastDate,
  //     tagTitle,
  //     contentTitle,
  //     currentSort,
  //   ],
  //   queryFn: () => getPostListFirebase(),
  //   staleTime: 6000,
  //   gcTime: 30000,
  // });
  // if (isLoading) return <div>Loading...</div>;
  // if (isError) return <div>Error fetching data</div>;

  const getFilteredPostList = async () => {
    let result;
    const start = startDate ? startDate : null;
    const end = lastDate ? lastDate : null;

    if (tagTitle[0]) {
      const hashTagFiltered: PostDataType[] = (await hashTagFilterPost(
        tagTitle[0],
        start,
        end
      )) as PostDataType[];
      result = hashTagFiltered;

      if (contentTitle) {
        result = hashTagFiltered.filter((post) =>
          post.post_title.toLowerCase().includes(contentTitle.toLowerCase())
        );
      }
    }
    if (!tagTitle[0] && contentTitle) {
      result = await titleFilterPost(contentTitle, start, end);
    }
    if (!tagTitle[0] && !contentTitle) {
      result = await dateFilterPost(start, end);
    }
    setItemListData(result);
  };

  useEffect(() => {
    if (startDate || lastDate || tagTitle.length > 0 || contentTitle) {
      getFilteredPostList();
    }
  }, [startDate, lastDate, tagTitle, contentTitle]);

  return (
    <>
      <Head>
        <title>my blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={style.main}>
        <Nav />
        <Filter
          filterTitle={filterTitle}
          changeText={setFilterTitle}
          changeSort={changeSort}
          resetData={setItemListData}
        />
        {!loading && itemListData.length === 0 ? (
          <div className="my-60 flex flex-col items-center gap-4 text-gray300">
            <div className="text-3xl">검색된 데이터가 없습니다.</div>
            <div className="text-3xl">다시 검색해주세요.</div>
          </div>
        ) : (
          <div style={{ display: "flex", flexDirection: "column", gap: 10 }}>
            {posts.map((item, idx) => {
              return (
                <Item
                  key={item.post_id}
                  onFetchMore={() => setPage((prev) => prev + 10)}
                  isLastItem={posts.length - 1 === idx}
                  // moveToUserMain={() => moveToPage(`/${"username"}`)}
                  moveToUserMain={getReady}
                  item={item}
                />
              );
            })}
          </div>
        )}

        {loading && <div>loading</div>}
      </div>
    </>
  );
}
