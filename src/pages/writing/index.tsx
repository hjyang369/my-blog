import Head from "next/head";
import style from "./writing.module.css";
import useInputValue from "../../hooks/useInputValue";
import axios from "axios";
import Nav from "../../components/Nav/Nav";
import { useState } from "react";
import React from "react";
import { WritingInputValueType } from "../../types/post";
import useMoveToPage from "../../hooks/useMovetoPage";
import ClickTag from "../../components/common/clickTag";
import dynamic from "next/dynamic";
// import { addPost } from "../api/post"; //FIREBASE

const MDEditor = dynamic(() => import("@uiw/react-md-editor"), {
  ssr: false,
});

export default function Writing() {
  const initInputValue: WritingInputValueType = {
    title: "",
    tag: "",
    author: "",
  };

  const { inputValue, setInputValue, handleInput } =
    useInputValue(initInputValue);
  const [tags, setTags] = useState<string[]>([]);
  const [markdown, setMarkDown] = useState("");
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;
  const { moveToPage } = useMoveToPage();

  const postingFuncData = {
    title: inputValue.title,
    content: markdown,
    // author: inputValue.author,
    author: "ddu222",
    hashTags: tags.join(""),
  };

  const postWriting = (data) => {
    axios
      .post(
        `${baseUrl}/post`,
        data
        // {
        //   Authorization: `Bearer ${"토큰"}`,
        // }
      )
      .then((data) => {
        if (data.status === 200) {
          moveToPage("/");
        } else if (data.status === 400) {
          alert("다시 확인해주세요.");
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };

  // firebase 글 생성 api //FIREBASE
  // const postWriting = (data) => {
  //   addPost(data)
  //     .then(() => moveToPage("/"))
  //     .catch(() => alert("작성에 실패했습니다. 다시 시도해주세요."));
  // };

  // 유효성 검사
  // const titleValid =
  //   inputValue.title.length > 0 && inputValue.title.length <= 20;
  // const textsValid = inputValue.texts.length > 10;
  // const authorValid = inputValue.author.length > 0;
  // const postValid = titleValid && textsValid && authorValid;

  const makeTag = (e) => {
    const completedTag = "#" + inputValue.tag;

    if (e.key === "Enter" && inputValue.tag !== "") {
      if (tags.length < 3) {
        if (!tags.includes(completedTag)) {
          setTags([...tags, completedTag]);
          setInputValue({ ...inputValue, tag: "" });
        } else {
          alert("중복된 태그입니다.");
          setInputValue({ ...inputValue, tag: "" });
        }
      } else if (tags.length >= 3) {
        alert("태그는 최대 3개만 작성할 수 있어요.");
        setInputValue({ ...inputValue, tag: "" });
      }
    }
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
  };

  const removeTag = (idx) => {
    const confirmation = window.confirm("태그를 삭제하시겠습니까?");

    if (confirmation) {
      const updatedTags = tags.filter((_, i) => i !== idx);
      setTags(updatedTags);
    }
  };

  return (
    <>
      <Head>
        <title>my blog</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col items-center justify-center p-4 gap-4">
        <Nav postWriting={() => postWriting(postingFuncData)} isWriting />
        <div className="flex flex-col w-width60">
          <input
            name="title"
            placeholder="제목"
            maxLength={20}
            minLength={0}
            required
            className={style.inputs}
            onChange={handleInput}
          ></input>
          {/* <textarea
            name="texts"
            minLength={10}
            required
            placeholder="글 소개 내용을 입력해주세요."
            onChange={handleInput}
            defaultValue={initInputValue.subtitle}
            className="h-30 mb-4 p-4 resize-none overflow-x-hidden overflow-y-scroll border border-solid border-white rounded-xl8 text-2xl shadow-shadow200 "
          ></textarea> */}

          <div data-color-mode="light">
            <MDEditor
              height={490}
              value={markdown}
              onChange={setMarkDown}
              highlightEnable={false}
            />
          </div>

          <form
            className={style.formInputs}
            typeof="submit"
            onSubmit={handleFormSubmit}
          >
            {tags.map((tag, idx) => {
              return (
                <ClickTag
                  key={idx}
                  removeTag={removeTag}
                  tag={tag}
                  tagId={idx}
                  isWriting
                />
              );
            })}
            {tags.length < 3 && (
              <input
                type="text"
                className="border-0 outline-none"
                name="tag"
                placeholder={tags.length < 3 ? "태그를 입력해보세요." : ""}
                required
                onChange={(e) => handleInput(e)}
                onKeyUp={(e) => makeTag(e)}
                value={inputValue.tag}
              ></input>
            )}
          </form>
        </div>
      </main>
    </>
  );
}
